
https://cloud.ibm.com/docs/language-translator?topic=language-translator-customizing#creating-tmx-files

Make sure that your Language Translator service instance is on an Advanced or Premium pricing plan. The Lite and Standard plans do not support customization.

Maximum file size:
20 MB for service instances on Standard, Advanced, and Premium plans
2 MB for service instances on the Lite plan

The service requires training data to be provided in the Translation Memory Exchange (TMX) file format. You can store up to 10 customizations for each language pair in a service instance. The service supports two types of customization requests. You can either customize a model with a forced glossary or with a corpus that contains parallel sentences.

Use a forced glossary to force certain terms and phrases to be translated in a specific way.
Use a parallel corpus when you want your custom model to learn from general translation patterns in your samples. What your model learns from a parallel corpus can improve translation results for input text that the model hasn't been trained on.

The general improvements from parallel corpus customization are less predictable than the mandatory results you get from forced glossary customization. 

In some cases it might seem that a custom model trained with a parallel corpus is ignoring a specific example that you provided. In these cases, try searching your training data for other sentences that might be influencing the translation behavior, or consider using a forced glossary if you want to control a specific translation.


Forced glossary customization
=============================

Use a forced glossary to set mandatory translations for specific terms and phrases. If you want specific control over translation behavior, use a forced glossary.

* Training data format: TMX (UTF-8 encoded)
* Maximum file size: 10 MB
* You can apply a forced glossary to a base model, or to a model that has been customized with a parallel corpus
* Limit one forced glossary per model

Sampe TMX file
--------------

<?xml version="1.0" encoding="UTF-8"?>
<tmx version="1.4">
  <header creationtool="" creationtoolversion=""
    segtype="phrase" o-tmf="" adminlang="en"
    srclang="en" datatype="PlainText" o-encoding="UTF-8" />
  <body>
    <tu>
      <tuv xml:lang="en">
        <seg>international business machines</seg>
      </tuv>
      <tuv xml:lang="es">
        <seg>International Business Machines</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>patent</seg>
      </tuv>
      <tuv xml:lang="es">
        <seg>patentar</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Lee Zhang</seg>
      </tuv>
      <tuv xml:lang="es">
        <seg>Lijing Zhang</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>alley</seg>
      </tuv>
      <tuv xml:lang="es">
        <seg>胡同</seg>
      </tuv>
    </tu>
  </body>
</tmx>


Parallel corpus customization
=============================

Use a parallel corpus to provide additional translations for the base model to learn from. This helps to adapt the base model to a specific domain. How the resulting custom model translates text depends on the model's combined understanding of the parallel corpus and the base model.

* Training data format: TMX (UTF-8 encoded)
* Maximum length of translation pairs: 80 source words
* Minimum number of translation pairs: 5,000
* Maximum file size: 250 MB
* You can submit multiple parallel corpus files by repeating the parallel_corpus multipart form parameter as long as the cumulative size of the files doesn't exceed 250 MB.

Parallel corpus is used for a wide range of applications outside of Language Translator, including building a new translation model from scratch. In the scope of the Language Translator service, it contains pairs of terms or phrases that serve as alternate translation suggestions that you want the translation service to consider. It is used to enhanced a provided model to add terms and contexts in the form of phrases that might not be present in original model.

In contrast to the forced glossary, parallel corpuses are used to train the existing models, adding the terms and phrases from the input file to the existing training data rather replacing it. They do not override the original domain data.

To successfully train a custom model, a parallel corpus document must contain a minimum of 5,000 term and translation 


Creating TMX files
==================

To provide a glossary or corpus of terms for training the Language Translator service, create a valid UTF-8 encoded document that conforms to the Translation Memory Exchange (TMX) version 1.4 specification. TMX is an XML specification that is designed for machine-translation tools.

Each term and translation pair must be enclosed in <tu> tags:

    <tu>
      <tuv xml:lang="en">
        <seg>patent</seg>
      </tuv>
      <tuv xml:lang="fr">
        <seg>brevet</seg>
      </tuv>
    </tu>

Thexml:lang attribute in the <tuv> tag identifies the language in which a term is expressed, while the <seg> tag contains the term or the translation.

The Language Translator service uses only the <tu>, <tuv>, and <seg> elements. All other elements in the example are required to make a valid TMX file, or are informational, but are not used by the service.

Changing a TMX file to UTF-8 encoding
=====================================

You can use a number of tools to create or generate TMX files. Often, generated TMX files are UTF-16 encoded by default. The Language Translator service accepts only UTF-8 encoded TMX files. To change the encoding of a TMX file, complete the following steps:

i) Open the TMX file in a text editor.

ii) Change the XML header (if present) from <?xml ... encoding="utf-16"?> to <?xml ... encoding="utf-8"?>.

iii) Save the file with a new name and with UTF-8 encoding output.

Mac users can also change file encoding by updating the XML header of the document as described in step 2, and then running the following command in the Terminal:

iconv -f utf-16 -t utf-8 <utf-16_file_name.tmx> <new_utf-8_file_name.tmx>


0) set Token and url

export apikey=zu8uOU_XEZSC5V1rSv9woSBQ0nWMmvqgnVGndboO5mbw
export url=https://api.us-south.language-translator.watson.cloud.ibm.com/instances/34dc69a0-eae5-4cb7-af2a-1cffdae2b1cd

1) Customization support

curl --user "apikey:$apikey" "$url/v3/models?source=en&target=es&version=2018-05-01"

curl --user "apikey:$apikey" "$url/v3/models?source=en&target=zh&version=2018-05-01"

curl --user "apikey:$apikey" "$url/v3/models?source=hi&target=zh&version=2018-05-01"

curl --user apikey:$apikey "$url/v3/models?version=2018-05-01"

https://cloud.ibm.com/docs/language-translator?topic=language-translator-translation-models

2) Create your training data

The service requires training data to be provided in the Translation Memory Exchange (TMX) file format. You can store up to 10 customizations for each language pair in a service instance. The service supports two types of customization requests. You can either customize a model with a forced glossary or with a corpus that contains parallel sentences.

* Use a forced glossary to force certain terms and phrases to be translated in a specific way.
* Use a parallel corpus when you want your custom model to learn from general translation patterns in your samples. What your model learns from a parallel corpus can improve translation results for input text that the model hasn't been trained on.

After you have created your Translation Memory Exchange (TMX) files, you're ready to train your model.

3) Train your model

Use the Create model method to train your model. In your request, specify the model ID of a customizable base model, and training data in either the forced_glossary or parallel_corpus parameters.

curl -X POST --user "apikey:$apikey" --form forced_glossary=@en-es-ForcedGlossary.tmx "$url/v3/models?version=2018-05-01&base_model_id=en-es&name=custom-english-to-spanish"

Output

{
  "model_id" : "2eb00321-9765-4205-8880-1436ee20bfcd",
  "source" : "en",
  "target" : "es",
  "base_model_id" : "en-es",
  "domain" : "general",
  "customizable" : false,
  "default_model" : false,
  "owner" : "34dc69a0-eae5-4cb7-af2a-1cffdae2b1cd",
  "status" : "dispatching",
  "name" : "custom-english-to-spanish",
  "training_log" : null
}

4) Check the status of your model

Model training might take anywhere from a couple of minutes (for forced glossaries) to several hours (for large parallel corpora) depending on how much training data is involved. To see if your model is available, use the Get model details method and specify the model ID that you received in the service response in Step 2. Also, you can check the status of all of your models with the List models method.

The status response attribute describes the state of the model in the training process:

uploading
uploaded
dispatching
queued
training
trained
publishing
available

When the model status is available, your model is ready to use with your service instance.

The following example gets information for the model identified by the model ID 2eb00321-9765-4205-8880-1436ee20bfcd.

curl --user "apikey:$apikey" "$url/v3/models/2eb00321-9765-4205-8880-1436ee20bfcd?version=2018-05-01"

{
  "model_id" : "2eb00321-9765-4205-8880-1436ee20bfcd",
  "source" : "en",
  "target" : "es",
  "base_model_id" : "en-es",
  "domain" : "general",
  "customizable" : false,
  "default_model" : false,
  "owner" : "34dc69a0-eae5-4cb7-af2a-1cffdae2b1cd",
  "status" : "available",
  "name" : "custom-english-to-spanish",
  "training_log" : null
}

5) Translate text with your custom model

To use your custom model, specify the text that you want to translate and the custom model's model ID in the Translate method.

The following example translates text with the custom model identified by the model ID 2eb00321-9765-4205-8880-1436ee20bfcd.

curl -X POST --user "apikey:$apikey" --header "Content-Type: application/json" --data "{\"text\":\"Hello, Lee Zhang\",\"model_id\":\"2eb00321-9765-4205-8880-1436ee20bfcd\"}" "$url/v3/translate?version=2018-05-01"

{
  "translations" : [ {
    "translation" : "Hola, Lijing Zhang"
  } ],
  "word_count" : 4,
  "character_count" : 16
}

curl -X POST --user "apikey:$apikey" --header "Content-Type: application/json" --data "{\"text\":\"Hello, Lee Zhang. Please don't park in the alley.\",\"model_id\":\"2eb00321-9765-4205-8880-1436ee20bfcd\"}" "$url/v3/translate?version=2018-05-01"

{
  "translations" : [ {
    "translation" : "Hola, Lijing Zhang. Por favor, no estacione en el 胡同."
  } ],
  "word_count" : 13,
  "character_count" : 49
}




10) Deleting a custom translation model

To delete a custom translation model, use the Delete model method.

The following command deletes the translation model with model ID 3e7dfdbe-f757-4150-afee-458e71eb93fb.

curl -X DELETE --user "apikey:$apikey" "$url/v3/models/3e7dfdbe-f757-4150-afee-458e71eb93fb?version=2018-05-01"

